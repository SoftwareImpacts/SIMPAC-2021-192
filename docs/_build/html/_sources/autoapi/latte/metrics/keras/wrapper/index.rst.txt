:py:mod:`latte.metrics.keras.wrapper`
=====================================

.. py:module:: latte.metrics.keras.wrapper

.. autoapi-nested-parse::

   
   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   latte.metrics.keras.wrapper.KerasMetricsFunctionalWrapper



Functions
~~~~~~~~~

.. autoapisummary::

   latte.metrics.keras.wrapper.to_numpy



.. py:function:: to_numpy(args, kwargs)

   
   [summary]

   :param args: [description]
   :type args: [type]
   :param kwargs: [description]
   :type kwargs: [type]
   :return: [description]
   :rtype: [type]















   ..
       !! processed by numpydoc !!

.. py:class:: KerasMetricsFunctionalWrapper(metric: Callable, name: Optional[str] = None, **kwargs)

   Bases: :py:obj:`tensorflow.keras.metrics.Metric`

   
   Encapsulates metric logic and state.

   Args:
     name: (Optional) string name of the metric instance.
     dtype: (Optional) data type of the metric result.
     **kwargs: Additional layer keywords arguments.

   Standalone usage:

   ```python
   m = SomeMetric(...)
   for input in ...:
     m.update_state(input)
   print('Final result: ', m.result().numpy())
   ```

   Usage with `compile()` API:

   ```python
   model = tf.keras.Sequential()
   model.add(tf.keras.layers.Dense(64, activation='relu'))
   model.add(tf.keras.layers.Dense(64, activation='relu'))
   model.add(tf.keras.layers.Dense(10, activation='softmax'))

   model.compile(optimizer=tf.keras.optimizers.RMSprop(0.01),
                 loss=tf.keras.losses.CategoricalCrossentropy(),
                 metrics=[tf.keras.metrics.CategoricalAccuracy()])

   data = np.random.random((1000, 32))
   labels = np.random.random((1000, 10))

   dataset = tf.data.Dataset.from_tensor_slices((data, labels))
   dataset = dataset.batch(32)

   model.fit(dataset, epochs=10)
   ```

   To be implemented by subclasses:
   * `__init__()`: All state variables should be created in this method by
     calling `self.add_weight()` like: `self.var = self.add_weight(...)`
   * `update_state()`: Has all updates to the state variables like:
     self.var.assign_add(...).
   * `result()`: Computes and returns a value for the metric
     from the state variables.

   Example subclass implementation:

   ```python
   class BinaryTruePositives(tf.keras.metrics.Metric):

     def __init__(self, name='binary_true_positives', **kwargs):
       super(BinaryTruePositives, self).__init__(name=name, **kwargs)
       self.true_positives = self.add_weight(name='tp', initializer='zeros')

     def update_state(self, y_true, y_pred, sample_weight=None):
       y_true = tf.cast(y_true, tf.bool)
       y_pred = tf.cast(y_pred, tf.bool)

       values = tf.logical_and(tf.equal(y_true, True), tf.equal(y_pred, True))
       values = tf.cast(values, self.dtype)
       if sample_weight is not None:
         sample_weight = tf.cast(sample_weight, self.dtype)
         sample_weight = tf.broadcast_to(sample_weight, values.shape)
         values = tf.multiply(values, sample_weight)
       self.true_positives.assign_add(tf.reduce_sum(values))

     def result(self):
       return self.true_positives
   ```















   ..
       !! processed by numpydoc !!
   .. py:method:: update(self, *args, **kwargs)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: compute(self, *args, **kwargs)

      
















      ..
          !! processed by numpydoc !!


